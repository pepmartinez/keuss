"use strict";(self.webpackChunkkeuss_docusaurus=self.webpackChunkkeuss_docusaurus||[]).push([[932],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7086:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var a=n(3117),r=n(102),i=(n(7294),n(3905)),o=["components"],p={id:"about",title:"About",sidebar_label:"About"},s=void 0,l={unversionedId:"usage/pipelines/about",id:"usage/pipelines/about",title:"About",description:"Pipelines is a Keuss extension for building ETL processing graphs with ease while guaranteeing atomicity in the processing: whatever happens at the processing of an element, the element is guaranteed to be in either the source or in the destination queue; never in both, never in none.",source:"@site/docs/usage/pipelines/about.md",sourceDirName:"usage/pipelines",slug:"/usage/pipelines/about",permalink:"/keuss/docs/usage/pipelines/about",editUrl:"https://github.com/pepmartinez/keuss/edit/master/website/docs/usage/pipelines/about.md",tags:[],version:"current",frontMatter:{id:"about",title:"About",sidebar_label:"About"},sidebar:"someSidebar",previous:{title:"Redis Connections",permalink:"/keuss/docs/usage/redis-conns"},next:{title:"Processors",permalink:"/keuss/docs/usage/pipelines/processors"}},u=[{value:"Real, simple example",id:"real-simple-example",children:[],level:2},{value:"Pipeline-aware Queues",id:"pipeline-aware-queues",children:[],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Pipelines")," is a Keuss extension for building ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Extract,_transform,_load"},"ETL")," processing graphs with ease while guaranteeing atomicity in the processing: whatever happens at the processing of an element, the element is guaranteed to be in either the source or in the destination queue; never in both, never in none."),(0,i.kt)("p",null,"Keuss pipelines are build upon Keuss Queues with ",(0,i.kt)("em",{parentName:"p"},"pipeline")," capacity, which means Pipelines inherit all their advantages in terms of HA, durability and performance. So far, Keuss offers only one Queue backend with pipeline capacity, ",(0,i.kt)("inlineCode",{parentName:"p"},"pl-mongo")),(0,i.kt)("p",null,"Queues are linked together with processing units named ",(0,i.kt)("em",{parentName:"p"},"Processors"),", which glue together a source queue with zero or more destination queues. Each processor encapsulates a loop that could be described -in its simplest form- as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"forever do\n  src_queue.reserve () -> element    # reserve an element from entry queue\n  process (element) -> err, res      # process the element\n\n  if (err) then\n    if (err.drop) do                 # error tells processor to drop/ignore the element\n      src_queue.commit (element)\n    else do\n      src_queue.rollback (element)   # regular error, rollback. It would be retried\n    end\n  else\n    if (res.drop) do                 # processed ok, but drop the item anyway\n      src_queue.commit (element)\n    else do\n      # commit on entry queue and insert into the exit queue, all in one atomic operation\n      # modifications in the payload are conserved\n      move_to_next_queue (element, src_queue)\n    end\n  end\n\n  next_loop\nend\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"process()")," part is user-provided, passed as a function on the initialization of the processor"),(0,i.kt)("li",{parentName:"ul"},"The exact semantics of ",(0,i.kt)("inlineCode",{parentName:"li"},"move_to_next_queue()")," vary depending on the specific type of Processor chosen")),(0,i.kt)("h2",{id:"real-simple-example"},"Real, simple example"),(0,i.kt)("p",null,"Here is the simplest possible example: 2 queues connected with a very simple processor. Elements in the source queue are taken, a ",(0,i.kt)("inlineCode",{parentName:"p"},"passed: true")," is added to them and moved to the next queue:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const MQ = require    ('keuss/backends/pl-mongo');\nconst PDL = require   ('keuss/Pipeline/DirectLink');\nconst async = require ('async');\n\nconst factory_opts = {\n  url: 'mongodb://localhost/qeus'\n};\n\n// initialize factory\nMQ (factory_opts, (err, factory) => {\n  if (err) return console.error (err);\n\n  // factory ready, create 2 queues on default pipeline\n  const q_opts = {};\n  const q1 = factory.queue ('test_pl_1', q_opts);\n  const q2 = factory.queue ('test_pl_2', q_opts);\n\n  // tie them up, q1 -> q2\n  const pdl = new PDL (q1, q2);\n\n  pdl.start ((elem, done) => {\n    // pass element to next queue, set payload.passed to true\n    done (null, {\n      update: {\n        $set: {passed: true}\n      }\n    });\n  });\n\n  // insert elements in the entry queue\n  async.timesLimit (111, 3, (n, next) => q1.push ({a:n, b:'see it spin...'}, next));\n\n  // read elements at the outer end\n  async.timesLimit (111, 3, (n, next) => q2.pop ('exit', (err, res) => {\n    console.log ('end point get', res);\n    next ();\n  }));\n});\n")),(0,i.kt)("p",null,"just run this example and you'll see 111 elements being inserted at q1, being processed at the pdl processor, and then popped from q2"),(0,i.kt)("h2",{id:"pipeline-aware-queues"},"Pipeline-aware Queues"),(0,i.kt)("p",null,"As stated before only one Keuss Queue backed -",(0,i.kt)("inlineCode",{parentName:"p"},"pl-mongo"),"- is compatible with pipelines. Those are the pipeline-related options available at the backend:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pipeline"),": specifies the pipeline name for this queue. Only queues within the same pipeline (that is, same mongodb url and same pipeline name) can actually work together in a pipeline. Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"default"))),(0,i.kt)("p",null,"In the above example both queues q1 and q2 are created in a pipeline named 'default'. To use a different one you just change the code into:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const q_opts = {pipeline: 'some_other_pipeline'};\nconst q1 = factory.queue ('test_pl_1', q_opts);\nconst q2 = factory.queue ('test_pl_2', q_opts);\n")),(0,i.kt)("p",null,"Also, pipeline-aware queues provide a new operation:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"pl_step (id, next_queue, opts, callback)\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"id")," is a previously reserved Id")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"next_queue")," is the queue to (atomically) move the item to")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"opts")," are extra options for the operation:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"mature"),": Date instance with the not-before timestamp for the item, to be used when inserted into ",(0,i.kt)("inlineCode",{parentName:"p"},"next_queue"),". Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"now()"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"tries"),": number of tries for the item, to be used when inserted into next_queue. Defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"payload"),": if specified, use this as item's payload when moving to next_queue. This totally substitutes the previous payload")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"update"),": Optional object containing ",(0,i.kt)("a",{parentName:"p",href:"https://docs.mongodb.com/manual/reference/operator/update/"},"mongodb update operations"),". Those are mapped to be applied to the message's ",(0,i.kt)("inlineCode",{parentName:"p"},"payload"),". For example, in the example above:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"done (null, {\n  update: {\n    $set: {passed: true}\n  }\n});\n")),(0,i.kt)("p",{parentName:"li"},"the '",(0,i.kt)("inlineCode",{parentName:"p"},"update")," parameter of the second argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"done()")," is passed internally to ",(0,i.kt)("inlineCode",{parentName:"p"},"pl_step()")," as ",(0,i.kt)("inlineCode",{parentName:"p"},"opts.update"),": this would cause the message's ",(0,i.kt)("inlineCode",{parentName:"p"},"payload.passed")," to be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," even if there's no explicit mention of ",(0,i.kt)("inlineCode",{parentName:"p"},"payload")))))),(0,i.kt)("p",null,"The whole ",(0,i.kt)("inlineCode",{parentName:"p"},"pl_step()")," operation is guaranteed to be atomic; this includes applying of ",(0,i.kt)("inlineCode",{parentName:"p"},"opts.payload")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"opts.update")," if present"),(0,i.kt)("p",null,"Also, ",(0,i.kt)("inlineCode",{parentName:"p"},"opts.payload")," takes precedence over ",(0,i.kt)("inlineCode",{parentName:"p"},"opts.update"),": if both are specified only the former is taken into account, and the latter is totally ignored"))}d.isMDXComponent=!0}}]);